# -*- coding: utf-8 -*-
"""
Create and train the fully connected model on the arrays generated by 
training utils
"""
from model import FC_Model
import numpy as np
import pickle

rgb_params = {
'input_dropout' : 0.5,
'dense_dropout' : 0.5,
'layers' : [500],
'lr' : 0.0001,
'n_classes' : 3,
'savefile' : 'rgb_model.hdf5',
'loadfile' : 'rgb_model.hdf5',
'batch_size' : 200,
'val_split' : 0.2}

flow_params = {
'input_dropout' : 0.5,
'dense_dropout' : 0.5,
'layers' : [500],
'lr' : 0.0001,
'n_classes' : 3,
'savefile' : 'flow_model.hdf5',
'loadfile' : 'flow_model.hdf5',
'batch_size' : 100,
'val_split' : 0.2}

classes = ['walking', 'sitting_down', 'hand_waving']

load = False

rgb_features = pickle.load(open('rgb_train.p','rb'))
flow_features = pickle.load(open('flow_train.p','rb'))
labels = pickle.load(open('y_train.p','rb'))

int_labels = np.array([classes.index(lab) for lab in labels])

rgb_model = FC_Model(rgb_params)
flow_model = FC_Model(flow_params)

if load:
    rgb_model.load_weights(rgb_params['loadfile'])
    flow_model.load_weights(flow_params['loadfile'])
    
rgb_model.learn([rgb_features, int_labels], 200)
flow_model.learn([flow_features, int_labels], 200)

pickle.dump([rgb_params, flow_params], open('model.p','wb'))
